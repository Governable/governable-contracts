// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import {BrevisApp} from "brevis/BrevisApp.sol";
import {IBrevisProof} from "brevis/IBrevisProof.sol";

contract Governor is BrevisApp {
    constructor(IBrevisProof brevisProof) BrevisApp(brevisProof) {}

    bytes32 public vkHash;


    function handleProofResult(
        bytes32 /*_requestId*/,
        bytes32 _vkHash,
        bytes calldata _circuitOutput
    ) internal override {
        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed
        // our designated verifying key. This proves that the _circuitOutput is authentic
        require(vkHash == bytes32(0) || vkHash == _vkHash, "invalid vk");

        (uint64 blockNum, address contractAddress, bytes32 slotNumber, bytes32 value) = decodeOutput(_circuitOutput);
    }

    function decodeOutput(bytes calldata o) internal pure returns (uint64, address, bytes32, bytes32) {
        uint64 blockNum = uint64(bytes8(o[0:8])); // blockNum was output as a uint64 (8 bytes)
        address contractAddress = address(bytes20(o[8:28])); // contractAddress was output as an address
        bytes32 slot = bytes32(o[28:60]); // slot was output as a bytes32
        bytes32 slotValue = bytes32(o[60:92]); // slotValue was output as a bytes32
        
        return (blockNum, contractAddress, slot, slotValue);
    }

    function setVkHash(bytes32 _vkHash) external {
        vkHash = _vkHash;
    }
}